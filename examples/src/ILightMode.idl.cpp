
/*
 * Generated by NK-CPP
 */
#include <spdlog/spdlog.h>
#include "ILightMode.idl.hpp"
trafficlight::ILightMode::ILightMode(NkKosTransport *transport, nk_iid_t riid) : transport(transport), riid(riid) {
}
trafficlight::ILightMode::ILightMode(NkKosTransport *transport, const char *endpoint_name) : transport(transport) {
    riid = ServiceLocatorGetRiid(transport->handle, endpoint_name);
    if (INVALID_RIID == riid) {
        spdlog::error("Service RIID {} not found", endpoint_name);
    }
}
    nk_err_t trafficlight::ILightMode::SetMode(const CrossedDirectionsMode& obj, nk_uint32_t val, const vector<nk_uint8_t>& seq, const std::string& str) {
        trafficlight_ILightMode_SetMode_req req{
            {}, val
    };
    static trafficlight_ILightMode_SetMode_res res{};
    reqArena.reset();
    resArena.reset();
    nk_req_reset(&req);
    nk_req_reset(&res);
    nk_msg_set_method_id(
            &req,
            this->riid,
            trafficlight_ILightMode_SetMode_mid
    );
    nk_msg_set_method_id(
            &res,
            this->riid,
            trafficlight_ILightMode_SetMode_mid
    );
    nk_msg_set_ncaps(
            &req,
            trafficlight_ILightMode_SetMode_req_handles
    );
    nk_msg_set_ncaps(
            &res,
            trafficlight_ILightMode_SetMode_res_handles
    );
    
        // begin arg req.obj IDLTypeStruct
    
        // Not implemented or invalid usage!
    
    // end arg req.obj
    
        // begin arg req.seq IDLTypeList
    
        
        nk_uint32_t cnt_seq_0 = seq.size();
        nk_uint8_t* ptr_seq_0 = nk_arena_get(
                nk_uint8_t,
                &reqArena,
                &req.seq,
                &cnt_seq_0
        );
        rtl_memcpy(ptr_seq_0, (nk_uint8_t *) seq.data(), cnt_seq_0 * sizeof(nk_uint8_t));
    
    
    // end arg req.seq
    
        // begin arg req.str IDLTypeString
    
        rtl_size_t cnt_str_0 = str.length() + 1;
    nk_char_t *ptr_str_0 = nk_arena_alloc(
        nk_char_t,
        &reqArena,
        &req.str,
        cnt_str_0
    );
    rtl_strncpy((char *) ptr_str_0, (const char *) str.c_str(), cnt_str_0);
    
    // end arg req.str
    
    nk_err_t rc = nk_transport_call(
            &this->transport->base,
            &req.base_,
            nullptr,
            &reqArena,
            &res.base_,
            &resArena
            nullptr
    );
    return rc;
    }
