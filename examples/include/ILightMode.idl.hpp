
/*
* Generated by NK-CPP
*/
#ifndef TRAFFICLIGHT_ILIGHTMODE_IDL_HPP
#define TRAFFICLIGHT_ILIGHTMODE_IDL_HPP
#include <coresrv/sl/sl_api.h>
#include <coresrv/nk/transport-kos.h>
#include <vector>
#include "ILightMode.idl.h"
#include "XNkArena.hpp"
namespace trafficlight {
    using std::vector;
    class ILightMode {
    private:
        NkKosTransport *transport;
        nk_iid_t riid;
        XNkArena<trafficlight_ILightMode_req_arena_size> reqArena;
        XNkArena<trafficlight_ILightMode_res_arena_size> resArena;
    public:
    
        using ModeType = trafficlight_ILightMode_ModeType;
        using DirectionColor = trafficlight_ILightMode_DirectionColor;
        using DirectionMode = trafficlight_ILightMode_DirectionMode;
        using CrossedDirectionsMode = trafficlight_ILightMode_CrossedDirectionsMode;
        using TDSeq = trafficlight_ILightMode_TDSeq;
        using TDSeq3 = trafficlight_ILightMode_TDSeq3;
        using QQ = trafficlight_ILightMode_QQ;
    
        struct SetModeResponse {
            nk_err_t status;
        
            DirectionColor oobj;
            QQ oval;
            vector<vector<nk_uint8_t>> oseq;
        };
        ILightMode(NkKosTransport *transport, nk_iid_t riid);
        ILightMode(NkKosTransport *transport, const char* endpoint_name);
    
        nk_err_t SetMode(const CrossedDirectionsMode& obj, nk_uint32_t val, const vector<nk_uint8_t>& seq, const std::string& str);
    };
};
#endif //TRAFFICLIGHT_ILIGHTMODE_IDL_HPP
