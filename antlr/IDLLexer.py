# Generated from /home/petr/Desktop/nk-cpp/grammar/IDL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,3,
        16,143,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,
        17,168,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,
        18,193,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,3,20,204,
        8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,23,1,23,3,23,221,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,3,26,248,8,26,1,27,4,27,251,8,27,11,27,
        12,27,252,1,27,3,27,256,8,27,1,28,1,28,1,28,1,28,4,28,262,8,28,11,
        28,12,28,263,1,29,1,29,5,29,268,8,29,10,29,12,29,271,9,29,1,30,1,
        30,5,30,275,8,30,10,30,12,30,278,9,30,1,31,1,31,1,31,1,31,5,31,284,
        8,31,10,31,12,31,287,9,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,5,32,298,8,32,10,32,12,32,301,9,32,1,32,1,32,1,32,1,32,1,33,
        4,33,308,8,33,11,33,12,33,309,1,33,1,33,2,285,299,0,34,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,6,1,0,48,57,
        3,0,48,57,65,70,97,102,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,2,0,9,10,32,32,332,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,79,
        1,0,0,0,5,81,1,0,0,0,7,83,1,0,0,0,9,90,1,0,0,0,11,96,1,0,0,0,13,
        104,1,0,0,0,15,111,1,0,0,0,17,119,1,0,0,0,19,121,1,0,0,0,21,127,
        1,0,0,0,23,129,1,0,0,0,25,131,1,0,0,0,27,133,1,0,0,0,29,135,1,0,
        0,0,31,137,1,0,0,0,33,142,1,0,0,0,35,167,1,0,0,0,37,192,1,0,0,0,
        39,194,1,0,0,0,41,203,1,0,0,0,43,205,1,0,0,0,45,211,1,0,0,0,47,220,
        1,0,0,0,49,222,1,0,0,0,51,228,1,0,0,0,53,247,1,0,0,0,55,255,1,0,
        0,0,57,257,1,0,0,0,59,265,1,0,0,0,61,272,1,0,0,0,63,279,1,0,0,0,
        65,293,1,0,0,0,67,307,1,0,0,0,69,70,5,105,0,0,70,71,5,110,0,0,71,
        72,5,116,0,0,72,73,5,101,0,0,73,74,5,114,0,0,74,75,5,102,0,0,75,
        76,5,97,0,0,76,77,5,99,0,0,77,78,5,101,0,0,78,2,1,0,0,0,79,80,5,
        123,0,0,80,4,1,0,0,0,81,82,5,125,0,0,82,6,1,0,0,0,83,84,5,115,0,
        0,84,85,5,116,0,0,85,86,5,114,0,0,86,87,5,117,0,0,87,88,5,99,0,0,
        88,89,5,116,0,0,89,8,1,0,0,0,90,91,5,117,0,0,91,92,5,110,0,0,92,
        93,5,105,0,0,93,94,5,111,0,0,94,95,5,110,0,0,95,10,1,0,0,0,96,97,
        5,112,0,0,97,98,5,97,0,0,98,99,5,99,0,0,99,100,5,107,0,0,100,101,
        5,97,0,0,101,102,5,103,0,0,102,103,5,101,0,0,103,12,1,0,0,0,104,
        105,5,105,0,0,105,106,5,109,0,0,106,107,5,112,0,0,107,108,5,111,
        0,0,108,109,5,114,0,0,109,110,5,116,0,0,110,14,1,0,0,0,111,112,5,
        116,0,0,112,113,5,121,0,0,113,114,5,112,0,0,114,115,5,101,0,0,115,
        116,5,100,0,0,116,117,5,101,0,0,117,118,5,102,0,0,118,16,1,0,0,0,
        119,120,5,59,0,0,120,18,1,0,0,0,121,122,5,99,0,0,122,123,5,111,0,
        0,123,124,5,110,0,0,124,125,5,115,0,0,125,126,5,116,0,0,126,20,1,
        0,0,0,127,128,5,61,0,0,128,22,1,0,0,0,129,130,5,40,0,0,130,24,1,
        0,0,0,131,132,5,41,0,0,132,26,1,0,0,0,133,134,5,44,0,0,134,28,1,
        0,0,0,135,136,5,60,0,0,136,30,1,0,0,0,137,138,5,62,0,0,138,32,1,
        0,0,0,139,143,3,35,17,0,140,143,3,37,18,0,141,143,3,39,19,0,142,
        139,1,0,0,0,142,140,1,0,0,0,142,141,1,0,0,0,143,34,1,0,0,0,144,145,
        5,83,0,0,145,146,5,73,0,0,146,147,5,110,0,0,147,148,5,116,0,0,148,
        168,5,56,0,0,149,150,5,83,0,0,150,151,5,73,0,0,151,152,5,110,0,0,
        152,153,5,116,0,0,153,154,5,49,0,0,154,168,5,54,0,0,155,156,5,83,
        0,0,156,157,5,73,0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,160,
        5,51,0,0,160,168,5,50,0,0,161,162,5,83,0,0,162,163,5,73,0,0,163,
        164,5,110,0,0,164,165,5,116,0,0,165,166,5,54,0,0,166,168,5,52,0,
        0,167,144,1,0,0,0,167,149,1,0,0,0,167,155,1,0,0,0,167,161,1,0,0,
        0,168,36,1,0,0,0,169,170,5,85,0,0,170,171,5,73,0,0,171,172,5,110,
        0,0,172,173,5,116,0,0,173,193,5,56,0,0,174,175,5,85,0,0,175,176,
        5,73,0,0,176,177,5,110,0,0,177,178,5,116,0,0,178,179,5,49,0,0,179,
        193,5,54,0,0,180,181,5,85,0,0,181,182,5,73,0,0,182,183,5,110,0,0,
        183,184,5,116,0,0,184,185,5,51,0,0,185,193,5,50,0,0,186,187,5,85,
        0,0,187,188,5,73,0,0,188,189,5,110,0,0,189,190,5,116,0,0,190,191,
        5,54,0,0,191,193,5,52,0,0,192,169,1,0,0,0,192,174,1,0,0,0,192,180,
        1,0,0,0,192,186,1,0,0,0,193,38,1,0,0,0,194,195,5,72,0,0,195,196,
        5,97,0,0,196,197,5,110,0,0,197,198,5,100,0,0,198,199,5,108,0,0,199,
        200,5,101,0,0,200,40,1,0,0,0,201,204,3,43,21,0,202,204,3,45,22,0,
        203,201,1,0,0,0,203,202,1,0,0,0,204,42,1,0,0,0,205,206,5,98,0,0,
        206,207,5,121,0,0,207,208,5,116,0,0,208,209,5,101,0,0,209,210,5,
        115,0,0,210,44,1,0,0,0,211,212,5,115,0,0,212,213,5,116,0,0,213,214,
        5,114,0,0,214,215,5,105,0,0,215,216,5,110,0,0,216,217,5,103,0,0,
        217,46,1,0,0,0,218,221,3,49,24,0,219,221,3,51,25,0,220,218,1,0,0,
        0,220,219,1,0,0,0,221,48,1,0,0,0,222,223,5,97,0,0,223,224,5,114,
        0,0,224,225,5,114,0,0,225,226,5,97,0,0,226,227,5,121,0,0,227,50,
        1,0,0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,231,5,113,0,0,231,
        232,5,117,0,0,232,233,5,101,0,0,233,234,5,110,0,0,234,235,5,99,0,
        0,235,236,5,101,0,0,236,52,1,0,0,0,237,238,5,105,0,0,238,248,5,110,
        0,0,239,240,5,111,0,0,240,241,5,117,0,0,241,248,5,116,0,0,242,243,
        5,101,0,0,243,244,5,114,0,0,244,245,5,114,0,0,245,246,5,111,0,0,
        246,248,5,114,0,0,247,237,1,0,0,0,247,239,1,0,0,0,247,242,1,0,0,
        0,248,54,1,0,0,0,249,251,7,0,0,0,250,249,1,0,0,0,251,252,1,0,0,0,
        252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,256,3,57,28,
        0,255,250,1,0,0,0,255,254,1,0,0,0,256,56,1,0,0,0,257,258,5,48,0,
        0,258,259,5,120,0,0,259,261,1,0,0,0,260,262,7,1,0,0,261,260,1,0,
        0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,58,1,0,0,
        0,265,269,7,2,0,0,266,268,7,3,0,0,267,266,1,0,0,0,268,271,1,0,0,
        0,269,267,1,0,0,0,269,270,1,0,0,0,270,60,1,0,0,0,271,269,1,0,0,0,
        272,276,7,2,0,0,273,275,7,4,0,0,274,273,1,0,0,0,275,278,1,0,0,0,
        276,274,1,0,0,0,276,277,1,0,0,0,277,62,1,0,0,0,278,276,1,0,0,0,279,
        280,5,47,0,0,280,281,5,42,0,0,281,285,1,0,0,0,282,284,9,0,0,0,283,
        282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,1,0,0,0,286,
        288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,47,0,0,290,
        291,1,0,0,0,291,292,6,31,0,0,292,64,1,0,0,0,293,294,5,47,0,0,294,
        295,5,47,0,0,295,299,1,0,0,0,296,298,9,0,0,0,297,296,1,0,0,0,298,
        301,1,0,0,0,299,300,1,0,0,0,299,297,1,0,0,0,300,302,1,0,0,0,301,
        299,1,0,0,0,302,303,5,10,0,0,303,304,1,0,0,0,304,305,6,32,0,0,305,
        66,1,0,0,0,306,308,7,5,0,0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,
        1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,6,33,0,0,312,68,
        1,0,0,0,15,0,142,167,192,203,220,247,252,255,263,269,276,285,299,
        309,1,6,0,0
    ]

class IDLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    TYPE_PRIMITIVE = 17
    TYPE_SINT = 18
    TYPE_UINT = 19
    TYPE_HANDLE = 20
    TYPE_ARR = 21
    TYPE_BYTES = 22
    TYPE_STRING = 23
    TYPE_ARR_GENERIC = 24
    TYPE_ARRAY = 25
    TYPE_SEQUENCE = 26
    ARG_DIRECTION = 27
    INT = 28
    INT_HEX = 29
    ID = 30
    PACKAGE_ID = 31
    COMMENT = 32
    OL_COMMENT = 33
    SPACE = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'interface'", "'{'", "'}'", "'struct'", "'union'", "'package'", 
            "'import'", "'typedef'", "';'", "'const'", "'='", "'('", "')'", 
            "','", "'<'", "'>'", "'Handle'", "'bytes'", "'string'", "'array'", 
            "'sequence'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_PRIMITIVE", "TYPE_SINT", "TYPE_UINT", "TYPE_HANDLE", "TYPE_ARR", 
            "TYPE_BYTES", "TYPE_STRING", "TYPE_ARR_GENERIC", "TYPE_ARRAY", 
            "TYPE_SEQUENCE", "ARG_DIRECTION", "INT", "INT_HEX", "ID", "PACKAGE_ID", 
            "COMMENT", "OL_COMMENT", "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "TYPE_PRIMITIVE", "TYPE_SINT", "TYPE_UINT", 
                  "TYPE_HANDLE", "TYPE_ARR", "TYPE_BYTES", "TYPE_STRING", 
                  "TYPE_ARR_GENERIC", "TYPE_ARRAY", "TYPE_SEQUENCE", "ARG_DIRECTION", 
                  "INT", "INT_HEX", "ID", "PACKAGE_ID", "COMMENT", "OL_COMMENT", 
                  "SPACE" ]

    grammarFileName = "IDL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


