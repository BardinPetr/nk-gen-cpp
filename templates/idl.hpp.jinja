{% autoescape false %}

{% import "method.jinja" as method %}
{% set guard = (ns + "_" + cls + "_IDL_HPP") | upper %}

/*
* Generated by NK-CPP
*/

#ifndef {{ guard }}
#define {{ guard }}

#include <coresrv/sl/sl_api.h>
#include <coresrv/nk/transport-kos.h>
#include <vector>

#include "{{ ns }}/{{ cls }}.idl.h"
#include "NkArena.hpp"

namespace {{ ns }} {
    using std::vector;

    class {{ cls }} {
    private:
        NkKosTransport *transport;
        nk_iid_t riid;

        NkArena<{{ ns }}_{{ cls }}_req_arena_size> reqArena;
        NkArena<{{ ns }}_{{ cls }}_res_arena_size> resArena;

    public:
    {% for t in ctx.typedefs %}
        using {{ t }} = {{ ctx.fqn }}_{{ t }};
    {%- endfor %}

    {% for m in methods %}
        struct {{ m.name }}Response {
            nk_err_t status;
        {% for a in m.arguments | out_args %}
            {{ a.decl.type }} {{ a.name }};
        {%- endfor %}
        };
    {%- endfor %}

        {{ cls }}(NkKosTransport *transport, nk_iid_t riid);
        {{ cls }}(NkKosTransport *transport, const char* endpoint_name);

    {% for m in methods %}
        {{ method.method_def(m.name, method_printer.arguments(m), method_printer.return_type(m)) }}
    {%- endfor %}
    };

};

#endif //{{ guard }}

{% endautoescape %}